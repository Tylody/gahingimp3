"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createComponentListenerOrNone = void 0;
const constants_1 = require("../../constants");
const actionrow_1 = require("./actionrow");
const components_1 = require("./components");
__exportStar(require("./actionbase"), exports);
__exportStar(require("./actionrow"), exports);
__exportStar(require("./button"), exports);
__exportStar(require("./components"), exports);
__exportStar(require("./context"), exports);
__exportStar(require("./selectmenu"), exports);
// returns false when none of the components need to be hooked
function createComponentListenerOrNone(options, id) {
    if (!options || typeof (options) !== 'object' || !options.components) {
        return null;
    }
    id = options.listenerId || id;
    if (options.components instanceof components_1.Components) {
        id = options.components.id || id;
        if (!options.components.components.length) {
            return [id || '', null];
        }
        options.components.id = id;
        return [id || '', options.components];
    }
    else {
        if (Array.isArray(options.components) && options.components.length) {
            const actionRows = options.components.map((component) => {
                if (component instanceof actionrow_1.ComponentActionRow) {
                    return component;
                }
                else if (component.type === constants_1.MessageComponentTypes.ACTION_ROW) {
                    return new actionrow_1.ComponentActionRow(component);
                }
                return null;
            }).filter((x) => x);
            if (actionRows.length && actionRows.some((row) => row.hasRun)) {
                return [id || '', new components_1.Components({ components: actionRows, id })];
            }
        }
    }
    return ['', null];
}
exports.createComponentListenerOrNone = createComponentListenerOrNone;
