"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Manager = void 0;
const Manager_1 = require("./lib/Manager");
__exportStar(require("./index"), exports);
class Manager extends Manager_1.Manager {
    client;
    constructor(client, nodes, options) {
        super(nodes, options);
        this.client = client;
        if (!this.send) {
            this.send = packet => {
                if (!this.client.options.totalShards)
                    return false;
                // eslint-disable-next-line no-bitwise
                const shardID = Number((BigInt(packet.d.guild_id) >> BigInt(22)) % BigInt(this.client.options.totalShards));
                const s = Object.entries(this.client.shardManager.shards).find(e => String(e[0]) === String(shardID))?.[1];
                if (s) {
                    s.connector.betterWs.sendMessage(packet);
                    return true;
                }
                else {
                    return false;
                }
            };
        }
        client.on("event", packet => {
            switch (packet.t) {
                case "VOICE_SERVER_UPDATE":
                    this.voiceServerUpdate(packet.d);
                    break;
                case "VOICE_STATE_UPDATE":
                    this.voiceStateUpdate(packet.d);
                    break;
                case "GUILD_CREATE":
                    for (const state of packet.d.voice_states ?? [])
                        this.voiceStateUpdate({ ...state, guild_id: packet.d.id });
                    break;
                default: break;
            }
        });
    }
}
exports.Manager = Manager;
//# sourceMappingURL=cloudstorm.js.map